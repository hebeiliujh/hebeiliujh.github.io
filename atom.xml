<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北歌的歌</title>
  
  <subtitle>莫使金樽空对月</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hebeiliujh.github.io/"/>
  <updated>2018-03-02T02:02:47.037Z</updated>
  <id>https://hebeiliujh.github.io/</id>
  
  <author>
    <name>北歌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式的一些实践</title>
    <link href="https://hebeiliujh.github.io/2018/03/02/some-RegExp/"/>
    <id>https://hebeiliujh.github.io/2018/03/02/some-RegExp/</id>
    <published>2018-03-02T01:46:53.000Z</published>
    <updated>2018-03-02T02:02:47.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><p>1 数字：^[0-9]<em>$<br>2 n位的数字：^\d{n}$<br>3 至少n位的数字：^\d{n,}$<br>4 m-n位的数字：^\d{m,n}$<br>5 零和非零开头的数字：^(0|[1-9][0-9]</em>)$<br>6 非零开头的最多带两位小数的数字：^([1-9][0-9]<em>)+(.[0-9]{1,2})?$<a id="more"></a><br>7 带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$<br>8 正数、负数、和小数：^(-|+)?\d+(.\d+)?$<br>9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$<br>10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$<br>11 非零的正整数：^[1-9]\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]</em>$<br>12 非零的负整数：^-[1-9][]0-9”$ 或 ^-[1-9]\d$<br>13 非负整数：^\d+$ 或 ^[1-9]\d<em>|0$<br>14 非正整数：^-[1-9]\d</em>|0$ 或 ^((-\d+)|(0+))$<br>15 非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d.\d|0.\d[1-9]\d|0?.0+|0$<br>16 非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d.\d|0.\d[1-9]\d))|0?.0+|0$<br>17 正浮点数：^[1-9]\d.\d|0.\d[1-9]\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$<br>18 负浮点数：^-([1-9]\d.\d|0.\d[1-9]\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$<br>19 浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d.\d|0.\d[1-9]\d|0?.0+|0)$</p><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><p>1 汉字：^[\u4e00-\u9fa5]{0,}$<br>2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$<br>3 长度为3-20的所有字符：^.{3,20}$<br>4 由26个英文字母组成的字符串：^[A-Za-z]+$<br>5 由26个大写英文字母组成的字符串：^[A-Z]+$<br>6 由26个小写英文字母组成的字符串：^[a-z]+$<br>7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$<br>8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$<br>9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$<br>10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$<br>11 可以输入含有^%&amp;’,;=?$\”等字符：[^%&amp;’,;=?$\x22]+<br>12 禁止输入含有~的字符：[^~\x22]+</p><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><p>1 Email地址：<br>    A: ^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)<em>$<br>    B: /^([a-zA-Z0-9<em>.-])+\@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$/<br>2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?<br>3 InternetURL：[a-zA-z]+://[^\s] 或 ^<a href="http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=])?$" target="_blank" rel="external">http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=])?$</a><br>4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$<br>5 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$<br>6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}<br>7 身份证号(15位、18位数字)：<br>    A: ^\d{15}|\d{18}$<br>    B: /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/<br>    C: 护照：/^1[45][0-9]{7}|[G|E][0-9]{8}|P[0-9]{7}|S[0-9]{7,8}|D[0-9]+$/<br>8 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$<br>9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9</em>]{4,15}$<br>10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$<br>11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.\d)(?=.[a-z])(?=.</em>[A-Z]).{8,10}$<br>12 日期格式：^\d{4}-\d{1,2}-\d{1,2}<br>13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$<br>14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$<br>15 钱的输入格式：<br>A.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]<em>$<br>B.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]</em>)$<br>C.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]<em>)$<br>D.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$<br>E.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$<br>F.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$<br>G.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})</em>(.[0-9]{1,2})?$<br>H.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})<em>)(.[0-9]{1,2})?$<br>I.备注：这就是最终结果了,别忘了”+”可以用”</em>“替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里<br>16 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+.[x|X][m|M][l|L]$<br>17 中文字符的正则表达式：[\u4e00-\u9fa5]<br>18 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))<br>19 空白行的正则表达式：\n\s*\r (可以用来删除空白行)<br>20 HTML标记的正则表达式：&lt;(\S?)[^&gt;]&gt;.?&lt;/\1&gt;|&lt;.? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)<br>21 首尾空白字符的正则表达式：^\s|\s$或(^\s)|(\s$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)<br>22 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)<br>23 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)<br>24 IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用)<br>25 IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d).){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))<br>原文地址：<a href="http://toutiao.com/i6231678548520731137/" target="_blank" rel="external">http://toutiao.com/i6231678548520731137/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、校验数字的表达式&quot;&gt;&lt;a href=&quot;#一、校验数字的表达式&quot; class=&quot;headerlink&quot; title=&quot;一、校验数字的表达式&quot;&gt;&lt;/a&gt;一、校验数字的表达式&lt;/h2&gt;&lt;p&gt;1 数字：^[0-9]&lt;em&gt;$&lt;br&gt;2 n位的数字：^\d{n}$&lt;br&gt;3 至少n位的数字：^\d{n,}$&lt;br&gt;4 m-n位的数字：^\d{m,n}$&lt;br&gt;5 零和非零开头的数字：^(0|[1-9][0-9]&lt;/em&gt;)$&lt;br&gt;6 非零开头的最多带两位小数的数字：^([1-9][0-9]&lt;em&gt;)+(.[0-9]{1,2})?$
    
    </summary>
    
      <category term="技术-基础" scheme="https://hebeiliujh.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Javascript" scheme="https://hebeiliujh.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Professional-Javascript-3</title>
    <link href="https://hebeiliujh.github.io/2018/02/24/Professional-Javascript-3/"/>
    <id>https://hebeiliujh.github.io/2018/02/24/Professional-Javascript-3/</id>
    <published>2018-02-24T02:14:52.000Z</published>
    <updated>2018-02-26T08:44:40.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>ECMAScript 中的基本数据类型包括 Undefined、Null、Boolean、Number 和 String。</li><li>与其他语言不同，ECMScript 没有为整数和浮点数值分别定义不同的数据类型，Number 类型可用于表示所有数值。</li><li>ECMAScript 中也有一种复杂的数据类型，即 Object 类型，该类型是这门语言中所有对象的基础类型。</li><li>严格模式为这门语言中容易出错的地方施加了限制。</li><li>ECMAScript 提供了很多与 C 及其他类 C 语言中相同的基本操作符，包括算术操作符、布尔操作符、关系操作符、相等操作符及赋值操作符等。</li><li>ECMAScript 从其他语言中借鉴了很多流控制语句，例如 if 语句、for 语句和 switch 语句等。ECMAScript 中的函数与其他语言中的函数有诸多不同之处。</li><li>无须指定函数的返回值，因为任何 ECMAScript 函数都可以在任何时候返回任何值。<a id="more"></a></li><li>实际上，未指定返回值的函数返回的是一个特殊的 undefined 值。</li><li>ECMAScript 中也没有函数签名的概念，因为其函数参数是以一个包含零或多个值的数组的形式传递的。 </li><li>可以向 ECMAScript 函数传递任意数量的参数，并且可以通过 arguments 对象来访问这些参数。</li><li>由于不存在函数签名的特性，ECMAScript 函数不能重载。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ECMAScript 中的基本数据类型包括 Undefined、Null、Boolean、Number 和 String。&lt;/li&gt;
&lt;li&gt;与其他语言不同，ECMScript 没有为整数和浮点数值分别定义不同的数据类型，Number 类型可用于表示所有数值。&lt;/li&gt;
&lt;li&gt;ECMAScript 中也有一种复杂的数据类型，即 Object 类型，该类型是这门语言中所有对象的基础类型。&lt;/li&gt;
&lt;li&gt;严格模式为这门语言中容易出错的地方施加了限制。&lt;/li&gt;
&lt;li&gt;ECMAScript 提供了很多与 C 及其他类 C 语言中相同的基本操作符，包括算术操作符、布尔操作符、关系操作符、相等操作符及赋值操作符等。&lt;/li&gt;
&lt;li&gt;ECMAScript 从其他语言中借鉴了很多流控制语句，例如 if 语句、for 语句和 switch 语句等。ECMAScript 中的函数与其他语言中的函数有诸多不同之处。&lt;/li&gt;
&lt;li&gt;无须指定函数的返回值，因为任何 ECMAScript 函数都可以在任何时候返回任何值。
    
    </summary>
    
      <category term="技术-基础" scheme="https://hebeiliujh.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Javascript" scheme="https://hebeiliujh.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP返回状态码及错误大全</title>
    <link href="https://hebeiliujh.github.io/2017/09/08/http-code/"/>
    <id>https://hebeiliujh.github.io/2017/09/08/http-code/</id>
    <published>2017-09-08T11:40:29.000Z</published>
    <updated>2018-02-26T07:58:56.409Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP返回状态码及错误大全<br>100 “continue”<br>101 “switching protocols”<br>102 “processing”<br>200 “ok”<br>201 “created”<br>202 “accepted”<br>203 “non-authoritative information”<br>204 “no content”<br>205 “reset content”<br>206 “partial content”<br><a id="more"></a><br>207 “multi-status”<br>208 “already reported”<br>226 “im used”<br>300 “multiple choices”<br>301 “moved permanently”<br>302 “found”<br>303 “see other”<br>304 “not modified”<br>305 “use proxy”<br>307 “temporary redirect”<br>308 “permanent redirect”<br>400 “bad request”<br>401 “unauthorized”<br>402 “payment required”<br>403 “forbidden”<br>404 “not found”<br>405 “method not allowed”<br>406 “not acceptable”<br>407 “proxy authentication required”<br>408 “request timeout”<br>409 “conflict”<br>410 “gone”<br>411 “length required”<br>412 “precondition failed”<br>413 “payload too large”<br>414 “uri too long”<br>415 “unsupported media type”<br>416 “range not satisfiable”<br>417 “expectation failed”<br>418 “I’m a teapot”<br>422 “unprocessable entity”<br>423 “locked”<br>424 “failed dependency”<br>426 “upgrade required”<br>428 “precondition required”<br>429 “too many requests”<br>431 “request header fields too large”<br>500 “internal server error”<br>501 “not implemented”<br>502 “bad gateway”<br>503 “service unavailable”<br>504 “gateway timeout”<br>505 “http version not supported”<br>506 “variant also negotiates”<br>507 “insufficient storage”<br>508 “loop detected”<br>510 “not extended”<br>511 “network authentication required”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP返回状态码及错误大全&lt;br&gt;100 “continue”&lt;br&gt;101 “switching protocols”&lt;br&gt;102 “processing”&lt;br&gt;200 “ok”&lt;br&gt;201 “created”&lt;br&gt;202 “accepted”&lt;br&gt;203 “non-authoritative information”&lt;br&gt;204 “no content”&lt;br&gt;205 “reset content”&lt;br&gt;206 “partial content”&lt;br&gt;
    
    </summary>
    
      <category term="技术-基础" scheme="https://hebeiliujh.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Hexo" scheme="https://hebeiliujh.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>React Native 组件生命周期</title>
    <link href="https://hebeiliujh.github.io/2017/08/30/reactnative-lifecycle/"/>
    <id>https://hebeiliujh.github.io/2017/08/30/reactnative-lifecycle/</id>
    <published>2017-08-30T03:12:57.000Z</published>
    <updated>2018-02-26T07:59:55.009Z</updated>
    
    <content type="html"><![CDATA[<p>React Native中的component存在生命周期</p><h1 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h1><hr><p>object getDefaultProps()<br>执行过一次后，被创建的类会有缓存，映射的值会存在this.props,前提是这个prop不是父组件指定的<br>这个方法在对象被创建之前执行，因此不能在方法内调用this.props ，另外，注意任何getDefaultProps()返回的对象在实例中共享，不是复制<br><a id="more"></a></p><h1 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h1><hr><p>object getInitialState()<br>控件加载之前执行，返回值会被用于state的初始化值</p><h1 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h1><hr><p>void componentWillMount()<br>执行一次，在初始化render之前执行，如果在这个方法内调用setState，render()知道state发生变化，并且只执行一次</p><h1 id="render"><a href="#render" class="headerlink" title="render"></a>render</h1><hr><p>ReactElement render()<br>render的时候会调用render()会被调用<br>调用render()方法时，首先检查this.props和this.state返回一个子元素，子元素可以是DOM组件或者其他自定义复合控件的虚拟实现<br>如果不想渲染可以返回null或者false，这种场景下，react渲染一个<noscript>标签，当返回null或者false时，ReactDOM.findDOMNode(this)返回null<br>render()方法是很纯净的，这就意味着不要在这个方法里初始化组件的state，每次执行时返回相同的值，不会读写DOM或者与服务器交互，如果必须如服务器交互，在componentDidMount()方法中实现或者其他生命周期的方法中实现，保持render()方法纯净使得服务器更准确，组件更简单</noscript></p><h1 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h1><hr><p>void componentDidMount()<br>在初始化render之后只执行一次，在这个方法内，可以访问任何组件，componentDidMount()方法中的子组件在父组件之前执行<br>从这个函数开始，就可以和 js 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求</p><h1 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">boolean shouldComponentUpdate(</div><div class="line">  object nextProps, object nextState</div><div class="line">)</div></pre></td></tr></table></figure><p>这个方法在初始化render时不会执行，当props或者state发生变化时执行，并且是在render之前，当新的props或者state不需要更新组件时，返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">shouldComponentUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps, nextState</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> nextProps.id !== <span class="keyword">this</span>.props.id;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当shouldComponentUpdate方法返回false时，讲不会执行render()方法，componentWillUpdate和componentDidUpdate方法也不会被调用</p><p>默认情况下，shouldComponentUpdate方法返回true防止state快速变化时的问题，但是如果·state不变，props只读，可以直接覆盖shouldComponentUpdate用于比较props和state的变化，决定UI是否更新，当组件比较多时，使用这个方法能有效提高应用性能</p><h1 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentWillUpdate(</div><div class="line">  object nextProps, object nextState</div><div class="line">)</div></pre></td></tr></table></figure><p>当props和state发生变化时执行，并且在render方法之前执行，当然初始化render时不执行该方法，需要特别注意的是，在这个函数里面，你就不能使用this.setState来修改状态。这个函数调用之后，就会把nextProps和nextState分别设置到this.props和this.state中。紧接着这个函数，就会调用render()来更新界面了</p><h1 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentDidUpdate(</div><div class="line">  object prevProps, object prevState</div><div class="line">)</div></pre></td></tr></table></figure><p>组件更新结束之后执行，在初始化render时不执行</p><h1 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> componentWillReceiveProps(</div><div class="line">  object nextProps</div><div class="line">)</div></pre></td></tr></table></figure><p>当props发生变化时执行，初始化render时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.setState(&#123;</div><div class="line">    <span class="attr">likesIncreasing</span>: nextProps.likeCount &gt; <span class="keyword">this</span>.props.likeCount</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h1><hr><p>void componentWillUnmount()</p><p>当组件要被从界面上移除的时候，就会调用componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等</p><!-- 总结React Native的生命周期就介绍完了，其中最上面的虚线框和右下角的虚线框的方法一定会执行，左下角的方法根据props state是否变化去执行，其中建议只有在componentWillMount,componentDidMount,componentWillReceiveProps方法中可以修改state值 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native中的component存在生命周期&lt;/p&gt;
&lt;h1 id=&quot;getDefaultProps&quot;&gt;&lt;a href=&quot;#getDefaultProps&quot; class=&quot;headerlink&quot; title=&quot;getDefaultProps&quot;&gt;&lt;/a&gt;getDefaultProps&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;object getDefaultProps()&lt;br&gt;执行过一次后，被创建的类会有缓存，映射的值会存在this.props,前提是这个prop不是父组件指定的&lt;br&gt;这个方法在对象被创建之前执行，因此不能在方法内调用this.props ，另外，注意任何getDefaultProps()返回的对象在实例中共享，不是复制&lt;br&gt;
    
    </summary>
    
      <category term="技术-React" scheme="https://hebeiliujh.github.io/categories/%E6%8A%80%E6%9C%AF-React/"/>
    
    
      <category term="React Native" scheme="https://hebeiliujh.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>常用 Git 命令清单</title>
    <link href="https://hebeiliujh.github.io/2017/03/16/git-cheat-sheet/"/>
    <id>https://hebeiliujh.github.io/2017/03/16/git-cheat-sheet/</id>
    <published>2017-03-16T01:25:44.000Z</published>
    <updated>2018-02-26T07:57:07.889Z</updated>
    
    <content type="html"><![CDATA[<p>2017-03-11 阮一峰 程序员之家<br>作者：阮一峰</p><p>我每天使用 Git ，但是很多命令记不住。<br>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库<a id="more"></a></li></ul><h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><hr><p>在当前目录新建一个Git代码库<br>$ git init</p><p>新建一个目录，将其初始化为Git代码库<br>$ git init [project-name]</p><p>下载一个项目和它的整个代码历史<br>$ git clone [url]</p><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><hr><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><p>显示当前的Git配置<br>$ git config –list</p><p>编辑Git配置文件<br>$ git config -e [–global]</p><p>设置提交代码时的用户信息<br>$ git config [–global] user.name “[name]”<br>$ git config [–global] user.email “[email address]”</p><h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><hr><p>添加指定文件到暂存区<br>$ git add [file1] [file2] …</p><p>添加指定目录到暂存区，包括子目录<br>$ git add [dir]</p><p>添加当前目录的所有文件到暂存区<br>$ git add .</p><p>删除工作区文件，并且将这次删除放入暂存区<br>$ git rm [file1] [file2] …</p><p>停止追踪指定文件，但该文件会保留在工作区<br>$ git rm –cached [file]</p><p>改名文件，并且将这个改名放入暂存区<br>$ git mv [file-original] [file-renamed]</p><h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><hr><p>提交暂存区到仓库区<br>$ git commit -m [message]</p><p>提交暂存区的指定文件到仓库区<br>$ git commit [file1] [file2] … -m [message]</p><p>提交工作区自上次commit之后的变化，直接到仓库区<br>$ git commit -a</p><p>提交时显示所有diff信息<br>$ git commit -v</p><p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息<br>$ git commit –amend -m [message]</p><p>重做上一次commit，并包括指定文件的新变化<br>$ git commit –amend [file1] [file2] …</p><h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><hr><p>列出所有本地分支<br>$ git branch</p><p>列出所有远程分支<br>$ git branch -r</p><p>列出所有本地分支和远程分支<br>$ git branch -a</p><p>新建一个分支，但依然停留在当前分支<br>$ git branch [branch-name]</p><p>新建一个分支，并切换到该分支<br>$ git checkout -b [branch]</p><p>新建一个分支，指向指定commit<br>$ git branch [branch] [commit]</p><p>新建一个分支，与指定的远程分支建立追踪关系<br>$ git branch –track [branch] [remote-branch]</p><p>切换到指定分支，并更新工作区<br>$ git checkout [branch-name]</p><p>建立追踪关系，在现有分支与指定的远程分支之间<br>$ git branch –set-upstream [branch] [remote-branch]</p><p>合并指定分支到当前分支<br>$ git merge [branch]</p><p>选择一个commit，合并进当前分支<br>$ git cherry-pick [commit]</p><p>删除分支<br>$ git branch -d [branch-name]</p><p>删除远程分支<br>$ git push origin –delete [branch-name]</p><p>$ git branch -dr [remote/branch]</p><h1 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h1><hr><p>列出所有tag<br>$ git tag</p><p>新建一个tag在当前commit<br>$ git tag [tag]</p><p>新建一个tag在指定commit<br>$ git tag [tag] [commit]</p><p>查看tag信息<br>$ git show [tag]</p><p>提交指定tag<br>$ git push [remote] [tag]</p><p>提交所有tag<br>$ git push [remote] –tags</p><p>新建一个分支，指向某个tag<br>$ git checkout -b [branch] [tag]</p><h1 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><hr><p>显示有变更的文件<br>$ git status</p><p>显示当前分支的版本历史<br>$ git log</p><p>显示commit历史，以及每次commit发生变更的文件<br>$ git log –stat</p><p>显示某个文件的版本历史，包括文件改名<br>$ git log –follow [file]</p><p>$ git whatchanged [file]</p><p>显示指定文件相关的每一次diff<br>$ git log -p [file]</p><p>显示指定文件是什么人在什么时间修改过<br>$ git blame [file]</p><p>显示暂存区和工作区的差异<br>$ git diff</p><p>显示暂存区和上一个commit的差异<br>$ git diff –cached [file]</p><p>显示工作区与当前分支最新commit之间的差异<br>$ git diff HEAD</p><p>显示两次提交之间的差异<br>$ git diff [first-branch]…[second-branch]</p><p>显示某次提交的元数据和内容变化<br>$ git show [commit]</p><p>显示某次提交发生变化的文件<br>$ git show –name-only [commit]</p><p>显示某次提交时，某个文件的内容<br>$ git show [commit]:[filename]</p><p>显示当前分支的最近几次提交<br>$ git reflog</p><h1 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><hr><p>下载远程仓库的所有变动<br>$ git fetch [remote]</p><p>显示所有远程仓库<br>$ git remote -v</p><p>显示某个远程仓库的信息<br>$ git remote show [remote]</p><p>增加一个新的远程仓库，并命名<br>$ git remote add [shortname] [url]</p><p>取回远程仓库的变化，并与本地分支合并<br>$ git pull [remote] [branch]</p><p>上传本地指定分支到远程仓库<br>$ git push [remote] [branch]</p><p>强行推送当前分支到远程仓库，即使有冲突<br>$ git push [remote] –force</p><p>推送所有分支到远程仓库<br>$ git push [remote] –all</p><h1 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h1><hr><p>恢复暂存区的指定文件到工作区<br>$ git checkout [file]</p><p>恢复某个commit的指定文件到工作区<br>$ git checkout [commit] [file]</p><p>恢复上一个commit的所有文件到工作区<br>$ git checkout .</p><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br>$ git reset [file]</p><p>重置暂存区与工作区，与上一次commit保持一致<br>$ git reset –hard</p><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br>$ git reset [commit]</p><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br>$ git reset –hard [commit]</p><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变<br>$ git reset –keep [commit]</p><p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支<br>$ git revert [commit]</p><h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><hr><p>生成一个可供发布的压缩包<br>$ git archive</p><p>原文：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html（点击文末阅读原文即可前往）" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html（点击文末阅读原文即可前往）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017-03-11 阮一峰 程序员之家&lt;br&gt;作者：阮一峰&lt;/p&gt;
&lt;p&gt;我每天使用 Git ，但是很多命令记不住。&lt;br&gt;一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。&lt;br&gt;下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Index / Stage：暂存区&lt;/li&gt;
&lt;li&gt;Repository：仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote：远程仓库
    
    </summary>
    
      <category term="技术-工具" scheme="https://hebeiliujh.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://hebeiliujh.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://hebeiliujh.github.io/2017/03/14/hello-world/"/>
    <id>https://hebeiliujh.github.io/2017/03/14/hello-world/</id>
    <published>2017-03-14T01:25:44.000Z</published>
    <updated>2018-02-26T07:58:15.507Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="技术-工具" scheme="https://hebeiliujh.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="https://hebeiliujh.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
